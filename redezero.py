# -*- coding: utf-8 -*-
"""RedeZero.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EUir-cyUUfZSBRxImXwEleXwpBpr3h9G

Criação da Rede Genérica
---
![alt text](https://raw.githubusercontent.com/JustinoDuarte/temp/master/cnnmini2.png)
"""

from keras import Model
from keras.layers import Input
from keras.layers.core import Dense, Flatten
from keras.layers.convolutional import Conv2D, MaxPooling2D
import keras.optimizers

entrada = Input(shape=(28,28,1))

# Definição da primeira camada convolucional com 64 filtros de tamanho 3x3.
conv_1 = Conv2D(64, (3, 3), padding='same')(entrada)
maxpool_1 = MaxPooling2D(pool_size=(2, 2),padding='same')(conv_1)

# Definição da primeira camada convolucional com 32 filtros de tamanho 3x3.
conv_2 = Conv2D(32, (3, 3), padding='same')(maxpool_1)
maxpool_2 = MaxPooling2D(pool_size=(2, 2),padding='same')(conv_2)

flat = Flatten()(maxpool_2)
fc_1 = Dense(512, activation='relu')(flat)
prediction = Dense(10, activation = 'softmax') (fc_1)

CNN_Generica = Model(inputs= entrada, outputs=[prediction])


CNN_Generica.compile(loss='categorical_crossentropy',
                    optimizer=keras.optimizers.sgd(lr=0.01,decay=0.001),
                    metrics=['accuracy'],)

# Essa função apresenta um sumário de cada camada com sua respectiva saída e quantidade de parâmetros.
CNN_Generica.summary()

"""Caregar base de imagem"""

from keras.datasets import fashion_mnist
import numpy as np
from sklearn.preprocessing import LabelBinarizer
import keras 

(x_train, y_train), (x_test, y_test) = fashion_mnist.load_data()

x_train=np.expand_dims(x_train,3)/255
x_test=np.expand_dims(x_test,3)/255

y_train = keras.utils.to_categorical(y_train, 10)
y_test = keras.utils.to_categorical(y_test, 10)


#visualizar alguns exemplos da base
import matplotlib.pyplot as plt
n_imgs = 15
for im in range(n_imgs):
  plt.subplot(1,n_imgs,im+1)
  plt.imshow(x_train[im,:,:,0],cmap='binary')
  plt.axis('off')
  
print(y_train[:13])

"""Treino e teste do Modelo"""

# treinamento
history = CNN_Generica.fit(x_train, y_train,
                            batch_size=400,
                            epochs=50,
                            verbose=True,
                            validation_data=(x_test, y_test))

# gráfico da acurácia nas épocas
plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.ylabel('Accuracia')
plt.xlabel('Epoca')
plt.legend(['treino', 'validação'])
plt.show()

# utilização da rede para predizer uma entrada
y_pred=CNN_Generica.predict(x_test[0:1])
y_real=y_test[0:1]

print('Classe real:\n',y_real)
print('Classe predita*:\n',y_pred)

print(np.argmax(y_real))
print(np.argmax(y_pred))

# avaliação em conjunto de dados
metrics = CNN_Generica.evaluate(x_test, y_test, verbose=True)
print('loss:',metrics[0],'\n acc:',metrics[1])